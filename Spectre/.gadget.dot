digraph "CFG for 'gadget' function" {
	label="CFG for 'gadget' function";

	Node0x564727a89e30 [shape=record,label="{entry:\l  %0 = alloca i64, align 8\l  %1 = alloca i32, align 4\l  %2 = alloca i32, align 4\l  %3 = alloca i32, align 4\l  %4 = alloca i64, align 8\l  %5 = alloca i32, align 4\l  %6 = alloca i64, align 8\l  %7 = ptrtoint i64* %0 to i64\l  %8 = bitcast [524288 x i8]* @probe_array to [65536 x i64]*\l  %9 = getelementptr inbounds [65536 x i64], [65536 x i64]* %8, i32 0, i32 0\l  store i32 0, i32* %1, align 4\l  store i32 42, i32* %2, align 4\l  %10 = load i32, i32* %2, align 4\l  %11 = shl i32 %10, 9\l  %12 = shl i32 1, 31\l  %13 = and i32 %12, %11\l  %SF = icmp eq i32 %13, %12\l  %ZF = icmp eq i32 %11, 0\l  store i32 %11, i32* %3, align 4\l  %14 = load i32, i32* %3, align 4\l  %15 = sext i32 %14 to i64\l  %16 = shl i64 %15, 2\l  %17 = shl i64 1, 63\l  %18 = and i64 %17, %16\l  %SF1 = icmp eq i64 %18, %17\l  %ZF2 = icmp eq i64 %16, 0\l  %19 = ptrtoint i64* %9 to i64\l  %20 = add nsw i64 %19, %16\l  %21 = shl i64 1, 63\l  %22 = and i64 %21, %20\l  %SF3 = icmp eq i64 %22, %21\l  %ZF4 = icmp eq i64 %20, 0\l  store i64 %20, i64* %4, align 8\l  %23 = load i32, i32* %1, align 4\l  %24 = zext i32 %23 to i64\l  %25 = zext i32 0 to i64\l  %26 = sub i64 %24, %25\l  %27 = call \{ i64, i1 \} @llvm.usub.with.overflow.i64(i64 %24, i64 %25)\l  %Extract_CF = extractvalue \{ i64, i1 \} %27, 1\l  %ZF5 = icmp eq i64 %26, 0\l  %28 = shl i64 1, 63\l  %29 = and i64 %28, %26\l  %SF6 = icmp eq i64 %29, %28\l  %30 = call \{ i64, i1 \} @llvm.ssub.with.overflow.i64(i64 %24, i64 %25)\l  %Extract_OF = extractvalue \{ i64, i1 \} %30, 1\l  store i64 %20, i64* %6\l  %CmpZF_JE = icmp eq i1 %ZF5, true\l  br i1 %CmpZF_JE, label %bb.2, label %bb.1\l|{<s0>T|<s1>F}}"];
	Node0x564727a89e30:s0 -> Node0x564727a8a9d0;
	Node0x564727a89e30:s1 -> Node0x564727a8a980;
	Node0x564727a8a980 [shape=record,label="{bb.1:                                             \l  %31 = load i64, i64* %4, align 8\l  %32 = inttoptr i64 %31 to i32*\l  %33 = load i32, i32* %32, align 4\l  store i32 %33, i32* %5, align 4\l  store i64 %31, i64* %6\l  br label %bb.2\l}"];
	Node0x564727a8a980 -> Node0x564727a8a9d0;
	Node0x564727a8a9d0 [shape=record,label="{bb.2:                                             \l  %34 = load i64, i64* %6\l  %35 = trunc i64 %34 to i32\l  ret i32 0\l}"];
}
